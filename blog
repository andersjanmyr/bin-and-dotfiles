#!/usr/bin/env ruby
# encoding: UTF-8
# Author: Anders Janmyr
require "rubygems"
require 'optparse'
require 'ostruct'

%w(redcarpet htmlentities).each do |lib|
  begin
    require lib
  rescue Exception => err
    puts "Missing gem #{lib}, install with `gem install #{lib}"
  end
end

# This is the name of the script that is called
PROGRAM_NAME = $0
PROGRAM_VERSION = 1.0

# Create an OpenStruct to save the options.
def options
  @options ||= OpenStruct.new
end


# This is the options of the program, see OptionParser
# http://ruby-doc.org/stdlib/libdoc/optparse/rdoc/classes/OptionParser.html
def program_options
  [
          # The values of the array are,
  # [long_option, short_option and parameter, description, code to execute]
  ['--google', '-g', "Format for Google blogger.",
   lambda { |value| options.google = true }
  ],
  ['--jayway', '-j', "Format for Jayway blog.",
   lambda { |value| options.jayway = true }
  ],
  ['--utf', '-u', "Include meta charset utf8",
   lambda { |value| options.utf = true }
  ],
  ['--stylesheet', '-s', "Add a stylesheet, md.css",
   lambda { |value| options.stylesheet = true }
  ],
  ['--verbose', '-v', "Log to standard output.",
   lambda { |value| options.verbose = true }
  ],
  ['--version', '-V', "Display the program version.",
   lambda { |value|
     puts "#{program_name}, version #{PROGRAM_VERSION}"
     exit
   }
  ]
  ]
end

option_parser = OptionParser.new do |opts|
  opts.banner = "#{PROGRAM_NAME} [options] files..."
  opts.separator ""
  opts.separator "Options are ..."

  # Add the command on_tail, to make it appear as the last option in the list.
  opts.on_tail("-h", "--help", "-H", "Display this help message.") do
    puts opts
    exit
  end

  program_options.each { |args| opts.on(*args) }
end

begin
  # Parse the options and remove them from the ARGV array
  option_parser.parse!
rescue OptionParser::ParseError => error
  puts error.message
  puts option_parser
  exit
end


class Array
  def split(str)
    result = []
    group = []
    each do |item|
      if item.include?(str)
        result << group
        group = []
      else
        group << item
      end
    end
    result << group
    result
  end
end

Chunk = Struct.new(:lang, :source, :options)

def highlight(chunk)
  if options.jayway
    text = "<pre>\n#{chunk.source}\n</pre>\n"
  else
    text = highlight_code(chunk)
  end
  if options.google
    text = text.sub(/(.*)(<pre>.*<\/pre>)(.*)/mi, '<blockquote>\2</blockquote>')
  end
  puts text
end

def highlight_code(chunk)
  tempfile = 'tempfile.txt'
  f = File.open(tempfile, "w") do |f|
    f.puts "#{chunk.source}"
  end
  %x{source-highlight --src-lang #{chunk.lang} < #{tempfile}}
ensure
  File.delete(tempfile) if File.exist?(tempfile)
end

def convert_texts(chunks)
  chunks.each do |chunk|
    if chunk.lang == "markdown"
        render_markdown chunk
    else
      highlight(chunk)
    end
  end
end

$markdown =  Redcarpet::Markdown.new(
    Redcarpet::Render::HTML, :smart => true, :autolink => true, :tables => true)
$html_entities = HTMLEntities.new

def render_markdown chunk
  if chunk.options && chunk.options[:html]
    text = chunk.source
  else
    text = $html_entities.encode(chunk.source, :basic)
  end
  puts $markdown.render(text)
end


def load_from_file(filename, snippet)
  path = File.expand_path(filename)
  raise "No such file error: " + path unless File.exist?(path)

  snippet_file = File.open(path)
  lines = snippet_file.readlines
  return lines.join if snippet.nil?

  before, between, *rest = lines.split(snippet.chomp)
  return between.join
end


def handle_file file
  chunks = []
  lang = "markdown"
  str = ""
  chunk_options = {}
  file.each_line do |line|
    if line =~ /^```/
      chunks << Chunk.new(lang, str, chunk_options)
      chunk_options = {}
      line = line[3..-1]
      lang, filename, snippet = line.split
      lang = 'markdown' unless lang
      if filename && filename != 'html'
        str = load_from_file(filename, snippet)
        chunks << Chunk.new(lang, str, chunk_options)
        chunk_options = {}
        lang = "markdown" # reset the lang
      end
      chunk_options[:html] = true if filename == 'html'
      str = ""
    else
      str << line
    end
  end
  chunks << Chunk.new(lang, str, chunk_options)
  convert_texts(chunks)
end

puts '<meta charset="utf-8">' if options.utf
puts '<link href="md.css" rel="stylesheet" type="text/css">' if options.stylesheet

if ARGV.empty?
  handle_file STDIN
else
  ARGV.each do |arg|
    file = File.open(arg)
    handle_file file
    file.close
  end
end

