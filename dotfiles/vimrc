call pathogen#infect()

syntax on
filetype plugin indent on
set t_Co=256
colorscheme github
if has("mac")
  silent! set nomacatsui
else
  set lazyredraw
end

" , is a more accessible leader
let mapleader = ","
nnoremap \ ,

set autoindent "indent in a smart way"
set background=light " we plan to use a light background
set backspace=indent,eol,start " make backspace a more flexible
set backup " make backup files
set backupdir=~/.vim/backup " where to put backup files
set clipboard+=unnamed " share windows clipboard
set cursorline
" set completeopt= " don't use a pop up menu for completions
set directory=~/.vim/tmp " directory to place swap files in
set enc=utf-8
set expandtab " no real tabs please!
set fileformats=unix,dos,mac " support all three, in this order
set formatoptions=qrn1
set gdefault
set grepprg=ack
set hidden " you can change buffers without saving
set hlsearch "Highlight search"
set ignorecase " case insensitive by default
set incsearch "incremental search
set infercase " case inferred by default
set laststatus=2 " always show the status line
set lbr
set list
set listchars=tab:▸\ ,eol:¬
set nocompatible " explicitly get out of vi-compatible mode
set noexrc " don't use local version of .(g)vimrc, .exrc
set number " enable line numbers
set colorcolumn=85
set undofile
set shell=bash

set ruler " Always show current positions along the bottom
set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
set showcmd " show the command being typed
set showmatch " show matching brackets
set smartcase " if there are caps, go case-sensitive
set spell
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set textwidth=79
set tabstop=2
set softtabstop=2
set shiftwidth=2
set wildmenu "Magic completion menu"
set wrap

syntax on " syntax highlighting on

" Autocommands
augroup RUBY
  autocmd!
  " Enable rspec support
  autocmd BufNewFile,BufRead */spec/**/*.rb,*_spec.rb compiler rspec
  autocmd BufNewFile,BufRead */test/**/*.rb,*_test.rb compiler rubyunit
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
augroup END

augroup MARKDOWN
  autocmd!
  autocmd FileType markdown,man map <Leader>p :w<CR>:!markdown < % > %.html && open %.html<CR><CR>
  autocmd FileType markdown,man map <Leader>h1 :.g/.\+/copy. <Bar> s/./=/g <CR>
  autocmd FileType markdown,man map <Leader>h2 :.g/.\+/copy. <Bar> s/./-/g <CR>
augroup END

autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType php setlocal ts=2 sts=2 sw=2 noexpandtab

" Jump to last position unless it is invalid or event handler
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" Plugins
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

let NERDSpaceDelims = 1
let NERDTreeIgnore=['\.rbc$', '\~$']

" Make Y behave like D
map Y y$

" Save with sudo
cmap w!! %!sudo tee > /dev/null %<CR>



" Remappings
" Visual tabbing should stay in visual
vmap > >gv
vmap < <gv


" allow a more natural style of line editing in :ex mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-L> <Right>
cnoremap <C-H> <Left>
cnoremap <C-B> <S-Left>
cnoremap <C-W> <S-Right>

" Enable saving with :W too
command! W :w

nnoremap / /\v
vnoremap / /\v

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap § <ESC>
nnoremap § <ESC>
vnoremap § <ESC>
inoremap jj <ESC>
inoremap :w <ESC>:w

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader><space> :noh<cr>
nnoremap <leader>h :Hammer<CR>
nnoremap <leader>v V`]
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <Leader>n :NERDTreeToggle<CR>
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
cnoremap %% <C-R>=expand('%:h').'/'<cr>


" TComment Options
map <Leader>c :TComment<CR>

"Fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd User fugitive
   \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
   \  nnoremap <buffer> .. :edit %:h<CR> |
   \ endif

"Ragtag
let g:ragtag_global_maps = 1

"Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1



xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap <Leader>w :call <SID>StripTrailingWhitespaces()<CR>

function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

"CtrlP
" CtrlP Options
let g:ctrlp_working_path_mode = 2
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*~,.git/*,tags,gem.tags,*/.sass-cache/*
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_map = '<D-t>'
let g:ctrlp_prompt_mappings = {
      \ 'ToggleRegex()':        ['<c-t>'],
      \ 'PrtClearCache()':      ['<c-r>'],
      \ }
let g:ctrlp_switch_buffer = 1
nnoremap <silent> <Leader>t :CtrlP<cr>
nnoremap <silent> <Leader>b :CtrlPBuffer<cr>

"Surround
xmap s <Plug>VSurround

nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>

autocmd FileType sass setlocal ts=4 sts=4 sw=4 expandtab

au FocusLost * :silent! wall                 " Save on FocusLost
au FocusLost * call feedkeys("\<C-\>\<C-n>") " Return to normal mode on FocustLost

Helptags

set tags+=gems.tags


" Disable SuperTab
let g:SuperTabCrMapping = 0
"
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
" let g:neocomplcache_enable_smart_case = 1
" " Use camel case completion.
" let g:neocomplcache_enable_camel_case_completion = 1
" " Use underbar completion.
" let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3

" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <silent><CR>  <C-R>=neocomplcache#smart_close_popup()<CR><CR>
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ?
 \ "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

let g:neocomplcache_snippets_dir = "~/.vim/neocomplcache-snippets"

