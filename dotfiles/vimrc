set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Bundles

Bundle 'SirVer/ultisnips'
Bundle 'airblade/vim-gitgutter'
Bundle 'altercation/vim-colors-solarized'
Bundle 'andersjanmyr/vim-scratch'
Bundle 'baeuml/summerfruit256.vim'
Bundle 'digitaltoad/vim-jade'
Bundle 'dsolstad/vim-wombat256i'
Bundle 'malclocke/vim-buster'
Bundle 'edsono/vim-matchit'
Bundle 'ervandew/supertab'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'git@github.com:andersjanmyr/ultisnip-snippets.git'
Bundle 'godlygeek/tabular'
Bundle 'groenewege/vim-less'
Bundle 'jakar/vim-json'
Bundle 'jnwhiteh/vim-golang'
Bundle 'kana/vim-textobj-user'
Bundle 'kchmck/vim-coffee-script'
Bundle 'kien/ctrlp.vim'
Bundle 'matthias-guenther/hammer.vim'
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/zencoding-vim'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'nelstrom/vim-visual-star-search'
Bundle 'pangloss/vim-javascript'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'taq/vim-rspec'
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-repeat.git'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'vim-ruby/vim-ruby'
Bundle 'wavded/vim-stylus'
Bundle 'endel/vim-github-colorscheme'
Bundle 'StanAngeloff/php.vim'
Bundle 'joonty/vim-phpunitqf'

set t_Co=256
let g:solarized_termcolors=256
colorscheme solarized
if has("mac")
  silent! set nomacatsui
else
  set lazyredraw
end

" , is a more accessible leader
let mapleader = ","
nnoremap \ ,
set timeoutlen=300 " the delay before the leader kicks in.

set background=dark " we plan to use a light background
set backup " make backup files
set backupdir=~/.vim/backup " where to put backup files
set cmdheight=2 " Make room for larger commands without Enter
set clipboard+=unnamed " share windows clipboard
set cursorline
set enc=utf-8
set expandtab " no real tabs please!
set formatoptions=qrn1
set gdefault
set grepprg=ack
set hidden " you can change buffers without saving
set hlsearch "Highlight search"
set history=400 "Larger history
set ignorecase " case insensitive by default
set lbr
set list
" set listchars=tab:▸\ ,eol:¬
set nocompatible " explicitly get out of vi-compatible mode
set noexrc " don't use local version of .(g)vimrc, .exrc
set number " enable line numbers
set colorcolumn=85
set undofile
set shell=bash
set splitbelow
set splitright
set shortmess=atI " Use short messages to prevent press enter...
set smartcase " Smart searching for capitalized words
set spell
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
set textwidth=79
set tabstop=2
set softtabstop=2
set shiftwidth=2
set visualbell
set wildmode=list:longest,full "Magic completion menu"
set wrap


" Autocommands
augroup RUBY
  autocmd!
  " Enable rspec support
  autocmd BufNewFile,BufRead */spec/**/*.rb,*_spec.rb compiler rspec
  autocmd BufNewFile,BufRead */test/**/*.rb,*_test.rb compiler rubyunit
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
augroup END

augroup MARKDOWN
  autocmd!
  autocmd FileType markdown,man map <Leader>p :w<CR>:!markdown < % > %.html && open %.html<CR><CR>
  autocmd FileType markdown,man map <Leader>h1 :.g/.\+/copy. <Bar> s/./=/g <CR>
  autocmd FileType markdown,man map <Leader>h2 :.g/.\+/copy. <Bar> s/./-/g <CR>
augroup END

" Jump to last position unless it is invalid or event handler
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" Plugins
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

let NERDSpaceDelims = 1
let NERDTreeIgnore=['\.rbc$', '\~$']

" Save with sudo
cmap w!! %!sudo tee > /dev/null %

" Remappings
" Visual tabbing should stay in visual
vmap > >gv
vmap < <gv


" allow a more natural style of line editing in :ex mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-L> <Right>
cnoremap <C-H> <Left>
cnoremap <C-B> <S-Left>
cnoremap <C-W> <S-Right>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Enable saving with :W too
command! W :w

nnoremap / /\v
vnoremap / /\v

nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap § <ESC>
nnoremap § <ESC>
vnoremap § <ESC>
inoremap jj <ESC>
inoremap :w <ESC>:w

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <leader><space> :noh<cr>
nnoremap <leader>a <C-^>
nnoremap <leader>h :Hammer<CR>
nnoremap <leader>v V`]
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <Leader>n :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>
map <Leader>nF :NERDTreeFocus<CR>

" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nnoremap <leader>p :bufdo set ei-=Syntax \| do Syntax \| hardcopy! >%:t.ps


nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gg :Ggrep <C-R><C-W>
nnoremap <leader>q :sp ~/bin/dotfiles/vim/vim-quick.md<CR>

" Replace repeat last substitution to include flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" TComment Options
map <Leader>c :TComment<CR>

"Fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd User fugitive
   \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
   \  nnoremap <buffer> .. :edit %:h<CR> |
   \ endif

"Ragtag
let g:ragtag_global_maps = 1

"Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1



xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap <Leader>w :call <SID>StripTrailingWhitespaces()<CR>

function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction



"CtrlP
" CtrlP Options
let g:ctrlp_working_path_mode = 2
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*~,.git/*,tags,gems.tags,libs.tags,php.tags*/.sass-cache/*,*/target/*
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules|gems|static)$',
  \ 'file': '\v\.(tags|so)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_map = '<D-t>'
let g:ctrlp_prompt_mappings = {
      \ 'ToggleRegex()':        ['<c-t>'],
      \ 'PrtClearCache()':      ['<c-r>'],
      \ }
let g:ctrlp_switch_buffer = 1
nnoremap <c-p> :CtrlPMixed<cr>
nnoremap <silent> <Leader>b :CtrlPMixed<cr>
let g:ctrlp_root_markers = ['.ctrlp']

"Surround
xmap s <Plug>VSurround

autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType sass setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType coffee setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType less setlocal ts=4 sts=4 sw=4 expandtab


au FocusLost * :silent! wall                 " Save on FocusLost
au FocusLost * call feedkeys("\<C-\>\<C-n>") " Return to normal mode on FocustLost

set tags+=gems.tags
set tags+=libs.tags
set tags+=php.tags

set runtimepath+=~/.vim/bundle/ultisnip-snippets
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/ultisnip-snippets/UltiSnips'
let g:UltiSnipsDontReverseSearchPath = '1'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

