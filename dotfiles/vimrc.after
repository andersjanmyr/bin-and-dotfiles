set autoindent "indent in a smart way"
set backup " make backup files
set clipboard+=unnamed " share windows clipboard
set cursorline
set formatoptions=qrn1
set gdefault
set grepprg=ack
set hidden " you can change buffers without saving
set infercase " case inferred by default
set lbr


set list
set listchars=tab:▸\ ,eol:¬

set colorcolumn=85
set undofile

set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
set showcmd " show the command being typed
set showmatch " show matching brackets
set spell
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
function s:setupWrapping()
  set wrap
  set textwidth=79
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
endfunction

"Added Qargs function from
"http://stackoverflow.com/questions/7203963/
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction


call s:setupWrapping()

set wildmenu "Magic completion menu"

inoremap <M-o>       <Esc>o
inoremap <C-j>       <Down>
let g:ragtag_global_maps = 1

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

let NERDSpaceDelims = 1


" Remappings
" Visual tabbing should stay in visual
vmap > >gv
vmap < <gv


" allow a more natural style of line editing in :ex mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-L> <Right>
cnoremap <C-H> <Left>
cnoremap <C-B> <S-Left>
cnoremap <C-W> <S-Right>

" Enable saving with :W too
command! W :w

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap § <ESC>
nnoremap § <ESC>
vnoremap § <ESC>
inoremap jj <ESC>
inoremap :w<CR> <ESC>:w<CR>

" Window movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

au FocusLost * :wa

" Commenting {{{2
" requires NERDCommenter plugin
vnoremap <Leader>cc :call NERDComment(1, 'toggle')<CR>gv
noremap <Leader>cc :call NERDComment(0, 'toggle')

let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>

:helptags ~/.vim/doc

autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete

set tags=tags,vendor/tags

xmap s <Plug>VSurround


" Syntax of these languages is fussy over tabs Vs spaces
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab


function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction


nnoremap <leader>a :Ack
nnoremap <leader>h :Hammer<CR>
nnoremap <leader><space> :noh<cr>
nnoremap <leader>v V`]
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC.after<cr>
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>l :set list!<CR>

map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>et :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>y :YRShow<CR>
nmap <silent> <buffer> <leader>s :set spell!<CR>

nmap <Leader>u viwUe
inoremap <Leader>fn <C-R>=expand("%")<CR>

if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

nnoremap <Leader>w :call <SID>StripTrailingWhitespaces()<CR>

nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>viw
nnoremap <leader><leader> <c-^>


" Setup window change behavior
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999


xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

function! s:VSetSearch()
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

